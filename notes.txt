
@app.get("/store")
def get_stores():
    """Returns list of stores"""
    return {"stores": list(stores.values())}


@app.get("/store/<string:store_id>")
def get_store(store_id):
    """Returns a Store based on its unique id"""
    try:
        return stores[store_id]
    except KeyError:
        abort(404, message="Store not found.")


@app.post("/store")
def create_store():
    """Create store with unique id"""
    store_data = request.get_json()
    if "name" not in store_data:
        abort(
            400,
            message="Bad request. Ensure 'name' is included in the JSON payload.",
        )
        for store in stores.values():
            if store_data["name"] == store["name"]:
                abort(400, message="Store already exists.")
    store_id = uuid.uuid4().hex
    store = {**store_data, "id": store_id}
    stores[store_id] = store
    return store, 201


@app.delete("/store/<string:store_id>")
def delete_store(store_id):
    """Deletes a Store based on its unique id"""
    try:
        del stores[store_id]
        for item in items.values():
            if item["store_id"] == store_id:
                for key in items:
                    if items[key] == item:
                        del items[key]
                        break
        return {"message": "Store deleted."}
    except KeyError:
        abort(404, message="Store not found.")


@app.get("/item")
def get_all_items():
    """Returns list of all items"""
    return {"items": list(items.values())}


@app.get("/item/<string:item_id>")
def get_item(item_id):
    """Gets item using its item id"""
    try:
        return items[item_id]
    except KeyError:
        abort(404, message="Item not found.")


@app.post("/item")
def create_items():
    """Create items using the store id"""
    item_data = request.get_json()
    if (
        "price" not in item_data
        or "store_id" not in item_data
        or "name" not in item_data
    ):
        abort(
            400,
            message="Bad request, Ensure 'price', 'store_id', and 'name' are included in JSON payload.",
        )
    for item in items.values():
        if (
            item_data["name"] == item["name"]
            and item_data["store_id"] == item["store_id"]
         ):
            abort(400, message="Item already exists")
    if item_data["store_id"] not in stores:
        abort(404, message="Store not found.")
    item_id = uuid.uuid4().hex
    item = {**item_data, "id": item_id}
    items[item_id] = item

    return item, 201


@app.put("/item/<string:item_id>")
def update_item(item_id):
    """Update item using the store id"""
    item_data = request.get_json()
    if (
        "price" not in item_data
        or "name" not in item_data
    ):
        abort(
            400,
            message="Bad request. Ensure 'price' and 'name' are included in JSON payload.",
        )
    try:
        item = items[item_id]
        item |= item_data
        return item
    except KeyError:
        abort(404, message="Item not found.")


@app.delete("/item/<string:item_id>")
def delete_item(item_id):
    """Deletes item using its item id"""
    try:
        del items[item_id]
        return {"message": "Item deleted."}
    except KeyError:
        abort(404, message="Item not found.")
